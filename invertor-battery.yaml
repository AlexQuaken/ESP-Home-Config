substitutions:
  board_name: 'invertor-battery'
  static_ip: '192.168.0.163'
  scan_duration: !secret scan_duration
  update_interval: !secret update_interval

esphome:
  name: ${board_name}
  platform: ESP8266
  board: nodemcuv2

packages:
  device_base: !include packages/1wifi_api_ota_logger_mqtt.yaml
  base_sensors: !include packages/2common_sensors.yaml

sensor:
  - platform: adc
    pin: A0
    name: "Battery Pack VCC Internal"
    id: battery_pack_vcc_internal
    internal: True
    update_interval: 1s
    filters:
      - multiply: 15
    accuracy_decimals: 2
    device_class: "voltage"
    state_class: "measurement"
    icon: mdi:car-battery

  - platform: template
    name: "Battery Pack VCC"
    id: battery_pack_vcc
    update_interval: 30s
    lambda: |-
      return id(battery_pack_vcc_internal).state;
    filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 5
    accuracy_decimals: 2
    device_class: "voltage"
    state_class: "measurement"
    icon: mdi:car-battery

  - platform: template
    name: "Battery Pack VCC 2s"
    id: battery_pack_vcc_2s
    update_interval: 2s
    lambda: |-
      return id(battery_pack_vcc_internal).state;
    filters:
      - sliding_window_moving_average:
          window_size: 6
          send_every: 2
    accuracy_decimals: 2
    device_class: "voltage"
    state_class: "measurement"
    icon: mdi:car-battery

  - platform: template
    name: "Battery Pack Level"
    id: battery_pack_level
    update_interval: 10s
    device_class: "battery"
    state_class: "measurement"
    unit_of_measurement: '%'
    accuracy_decimals: 0
    icon: mdi:car-battery
    lambda: |-
      float voltage_measured = id(battery_pack_vcc_internal).state;  // Измеренное напряжение
      if (voltage_measured >= 12.4) {
        return 100.0;
      } else if (voltage_measured >= 10.4) {
        return ((voltage_measured - 10.4) / (12.4 - 10.4)) * 100.0;
      } else {
        return 0.0;  // Если напряжение ниже минимального, возвращаем 0%
      }
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10

#    lambda: |-
#      const float R_internal = 0.00167;  // Суммарное внутреннее сопротивление сборки
#      float voltage_measured = id(invertor_voltage).state;  // Измеренное напряжение
#      float current_load = id(invertor_current).state;  // Текущий ток нагрузки
#      float voltage_corrected = voltage_measured + (current_load * R_internal);  // Корректировка напряжения
#      
#      // Теперь используем скорректированное напряжение для расчета уровня заряда
#      if (voltage_corrected >= 12.) {
#        return 100;
#      } else if (voltage_corrected >= 12.4 && voltage_corrected < 12.6) {
#        return ((voltage_corrected - 12.4) / (12.6 - 12.4)) * 100 + 50;
#      } else if (voltage_corrected >= 12.2 && voltage_corrected < 12.4) {
#        return ((voltage_corrected - 12.2) / (12.4 - 12.2)) * 50;
#     } else if (voltage_corrected >= 12.0 && voltage_corrected < 12.2) {
#       return ((voltage_corrected - 12.0) / (12.2 - 12.0)) * 20;
#      } else if (voltage_corrected < 12.0) {
#        return 0;
#      } else {
#        return NAN;  // Возвращает "неизвестно", если напряжение вне ожидаемого диапазона
#      }

  - platform: pzemac
    current:
      name: "Invertor Current"
      id: "invertor_current"
    voltage:
      name: "Invertor Voltage"
      id: "invertor_voltage"
    power:
      name: "Invertor Power"
      id: "invertor_power"
    frequency:
      name: "Invertor Frequency"
    power_factor:
      name: "Invertor Power Factor"
    update_interval: 15s

  - platform: template
    name: "Invertor Power Average"
    internal: True
    lambda: |-
      return id(invertor_power).state;
    filters:
      - sliding_window_moving_average:
          window_size: 4
          send_every: 4
    unit_of_measurement: 'W'
    accuracy_decimals: 2

display:
  platform: tm1637
  clk_pin: D6
  dio_pin: D5
  update_interval: 250ms
  lambda: |-
    it.printf("%.2f", id(battery_pack_vcc_2s).state );

binary_sensor:
  - platform: homeassistant
    name: "main_power_fail"
    id: main_power_fail
    entity_id: binary_sensor.main_power_fail

uart:
  tx_pin: D8
  rx_pin: D7
  stop_bits: 1
  baud_rate: 9600
